enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
enum MusicGenre {
  Pop
  Rock
  Classical
  Jazz
  Afrobeat
}

enum Personality {
  Introvert
  Extrovert
  Ambivert
}

enum Religion {
  Christian
  Muslim
  Buddhist
  Atheist
  Other
}

enum Age {
  Age13to17
  Age18to25
  Age26to35
  Age36to45
  Age46Above
}

enum Gender {
  Male
  Female
  Other
}

enum Creative {
  Writing
  Photography
  Illustration
  FashionDesign
  Filmmaking
  Choreography
  Music
  Handcraft
  Poetry
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(uuid())
  name       String
  password   String
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  diaryEntries  DiaryEntry[]

  Attributes  Attributes?
  Preferences Preferences?

  sentRequests     PenpalRequest[] @relation("SentRequests")
  receivedRequests PenpalRequest[] @relation("ReceivedRequests")
  connection1      PenpalConnection[] @relation("Connection1")
  connection2      PenpalConnection[] @relation("Connection2")
}


model DiaryEntry{
  id  String  @id @default(uuid())
  title String 
  mood String
  content String
  image String?
  video String?
  audio String?
  isPrivate Boolean  @default(false) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}



model Attributes {
  id           String       @id @default(uuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  musicGenre   MusicGenre
  personality  Personality
  religion     Religion
  age          Age
  gender       Gender
  creative     Creative
}

model Preferences {
  id           String       @id @default(uuid())
  userId       String       @unique
  user         User         @relation(fields: [userId], references: [id])
  musicGenre   MusicGenre
  personality  Personality
  religion     Religion
  age          Age
  gender       Gender
  creative     Creative
}

model PenpalRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime @default(now())
  
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}

model PenpalConnection {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())
  
  user1     User     @relation("Connection1", fields: [user1Id], references: [id])
  user2     User     @relation("Connection2", fields: [user2Id], references: [id])
}


